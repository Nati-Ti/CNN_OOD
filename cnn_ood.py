# -*- coding: utf-8 -*-
"""CNN_OOD.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FJqncgxdg4s-idyyyKm0-zm5Pz7DeTF9
"""

import tensorflow as tf
from tensorflow import keras
from keras import models, layers
import matplotlib.pyplot as plt
from IPython.display import HTML
import os
import json
from zipfile import ZipFile
from PIL import Image
import shutil
import numpy as np

!pip install split-folders
!pip install kaggle

kaggle_credentails = json.load(open("kaggle.json"))

os.environ['KAGGLE_USERNAME'] = kaggle_credentails["username"]
os.environ['KAGGLE_KEY'] = kaggle_credentails["key"]

!kaggle datasets download -d arjuntejaswi/plant-village

with ZipFile("plant-village.zip", 'r') as zip_ref:
    zip_ref.extractall()

import os
import shutil

source_dir = '/content/PlantVillage'
destination_dir = '/content/PlantVillage_Potato'

selected_subfolders = ['Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy']

for subfolder in selected_subfolders:
    src_path = os.path.join(source_dir, subfolder)
    dst_path = os.path.join(destination_dir, subfolder)

    if os.path.exists(src_path):
        shutil.copytree(src_path, dst_path)
        print(f"Copied {subfolder} to {destination_dir}")
    else:
        print(f"{subfolder} not found in {source_dir}")

import splitfolders

input_folder = '/content/PlantVillage_Potato'
output_folder = '/content/PlantVillage_Potato_Split/'

splitfolders.ratio(input_folder, output=output_folder, seed=42, ratio=(0.8, 0.1, 0.1))

import os
import shutil

source_dir = '/content/PlantVillage'
destination_dir = '/content/PlantVillage_Merged/Non_Potato'

excluded_subfolders = ['Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy']

os.makedirs(destination_dir, exist_ok=True)

for subfolder in os.listdir(source_dir):
    src_path = os.path.join(source_dir, subfolder)

    if os.path.isdir(src_path) and subfolder not in excluded_subfolders:
        for file_name in os.listdir(src_path):
            file_path = os.path.join(src_path, file_name)

            if os.path.isfile(file_path):
                shutil.copy(file_path, destination_dir)
                print(f"Copied {file_name} from {subfolder} to {destination_dir}")

import os
import shutil

source_dir = '/content/PlantVillage_Potato'
destination_dir = '/content/PlantVillage_Merged/Potato'

excluded_subfolders = []

os.makedirs(destination_dir, exist_ok=True)

for subfolder in os.listdir(source_dir):
    src_path = os.path.join(source_dir, subfolder)

    if os.path.isdir(src_path) and subfolder not in excluded_subfolders:
        for file_name in os.listdir(src_path):
            file_path = os.path.join(src_path, file_name)

            if os.path.isfile(file_path):
                shutil.copy(file_path, destination_dir)
                print(f"Copied {file_name} from {subfolder} to {destination_dir}")

import splitfolders

input_folder = '/content/PlantVillage_Merged'
output_folder = '/content/PlantVillage_Merged_Split'

splitfolders.ratio(input_folder, output=output_folder, seed=42, ratio=(0.8, 0.1, 0.1))

IMAGE_SIZE = 256
CHANNELS = 3

from keras._tf_keras.keras.preprocessing.image import ImageDataGenerator

datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

def combined_generator(generator1, generator2):
    while True:
        X1, y1 = next(generator1)
        X2, y2 = next(generator2)
        yield X1, {'disease_output': y1, 'ood_output': y2}

train_disease_gen = datagen.flow_from_directory(
    '/content/PlantVillage_Potato_Split/train',
    target_size=(IMAGE_SIZE, IMAGE_SIZE),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

train_ood_gen = datagen.flow_from_directory(
    '/content/PlantVillage_Merged_Split/train',
    target_size=(IMAGE_SIZE, IMAGE_SIZE),
    batch_size=32,
    class_mode='binary',
    subset='training'
)

train_generator = combined_generator(train_disease_gen, train_ood_gen)

val_disease_gen = datagen.flow_from_directory(
    '/content/PlantVillage_Potato_Split/val',
    target_size=(IMAGE_SIZE, IMAGE_SIZE),
    batch_size=32,
    class_mode='categorical',
    subset='validation'
)

val_ood_gen = datagen.flow_from_directory(
    '/content/PlantVillage_Merged_Split/val',
    target_size=(IMAGE_SIZE, IMAGE_SIZE),
    batch_size=32,
    class_mode='binary',
    subset='validation'
)

def adjusted_generator(generator1, generator2):
    while True:
        try:
            X1, y1 = next(generator1)
            X2, y2 = next(generator2)
            yield X1, {'disease_output': y1, 'ood_output': y2}
        except StopIteration:
            generator1 = iter(generator1)
            generator2 = iter(generator2)

val_generator = adjusted_generator(val_disease_gen, val_ood_gen)

x_val, y_val = next(val_generator)
print("Validation shapes:", x_val.shape, y_val['disease_output'].shape, y_val['ood_output'].shape)

# class_names = list(train_generator.class_indices.keys())  # Access class_indices from the ImageDataGenerator
# class_names

import tensorflow as tf
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Input
from tensorflow.keras.models import Model

IMAGE_SIZE = 256
input_layer = Input(shape=(IMAGE_SIZE, IMAGE_SIZE, 3))

# Use ResNet50 as a shared feature extractor (without the top layer)
base_model = ResNet50(weights='imagenet', include_top=False, input_tensor=input_layer)

# Shared feature extractor
x = GlobalAveragePooling2D()(base_model.output)

# Primary task head (Potato Disease Classification - 3 classes)
primary_output = Dense(3, activation='softmax', name='disease_output')(x)

# Auxiliary task head (OOD Detection - binary classification)
auxiliary_output = Dense(1, activation='sigmoid', name='ood_output')(x)

# Define the multi-task model with two outputs
model = Model(inputs=input_layer, outputs=[primary_output, auxiliary_output])

model.compile(
    optimizer='adam',
    loss={'disease_output': 'categorical_crossentropy', 'ood_output': 'binary_crossentropy'},
    metrics={'disease_output': 'accuracy', 'ood_output': 'accuracy'}
)

model.summary()

steps_per_epoch = min(len(train_disease_gen), len(train_ood_gen))
validation_steps = min(len(val_disease_gen), len(val_ood_gen))

history = model.fit(
    train_generator,
    steps_per_epoch=steps_per_epoch,
    epochs=1,
    validation_data=val_generator,
    validation_steps=validation_steps
)

from keras.preprocessing import image
from keras.applications.resnet50 import preprocess_input
import numpy as np

def preprocess_image(img_path):
    img = image.load_img(img_path, target_size=(IMAGE_SIZE, IMAGE_SIZE))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    return img_array

img_path = '/content/PlantVillage_Potato_Split/test/Potato___Early_blight/0267d4ca-522e-4ca0-b1a2-ce925e5b54a2___RS_Early.B 7020.JPG'
input_image = preprocess_image(img_path)

predictions = model.predict(input_image)

disease_pred = predictions[0]
ood_pred = predictions[1]

disease_classes = ['healthy', 'diseased1', 'diseased2']
predicted_class_index = np.argmax(disease_pred)
predicted_class = disease_classes[predicted_class_index]
disease_confidence = disease_pred[0][predicted_class_index]

ood_confidence = ood_pred[0][0]
is_potato = ood_confidence > 0.5

print(f'Disease Classification: {predicted_class} (Confidence: {disease_confidence*100:.2f}%)')
print(f'OOD Detection: {"Potato" if is_potato else "Not Potato"} (Confidence: {ood_confidence*100:.2f}%)')